/*http://www.tabladecalorias.net/
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gabi;

//import gabi.conex;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.AncestorEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 * https://youtu.be/b7diPP30yO8
 *
 * @author Usuario
 */
public class ContadorCalorias extends javax.swing.JFrame {

    int contador = 0;
    DefaultTableModel modelo = new DefaultTableModel();
    private int cant;
    private int cal;
    private int suma;
    private int prod;
    private int tot;
    private int cat, c;

    /**
     * Creates new form ContadorCalorias
     */
    public ContadorCalorias() {

        initComponents();

        int suma, tot, cant, cal, prod;
        Double totalxpor;
        categoria.setVisible(false);
        alerta.setVisible(false);
         tipoPac.setVisible(false);
        Ingredientes.removeAllItems();
        String driver = "com.mysql.jdbc.Driver";
        try {
            Class.forName(driver).newInstance();
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException ex) {
            Logger.getLogger(ContadorCalorias.class.getName()).log(Level.SEVERE, null, ex);
        }
        Connection con = null;
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost/saludabletentacion", "root", ""); //

            // Connection con=DriverManager.getConnection("com.mysql.jdbc.Driver");
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select * from ingredientes");
            while (rs.next()) {
                this.Ingredientes.addItem(rs.getString("nombre"));
            }
            contador++;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    public ContadorCalorias(JComboBox<String> Ingredientes, JButton aceptar, JTextField cantidad, JTable tabla, int cant, int cal, int prod, int suma, int tot) {
        this.contador = 0;
        this.Ingredientes = Ingredientes;
        this.aceptar = aceptar;
        this.cant = cant;
        this.cal = cal;
        this.tot = tot;
        this.suma = suma;
        this.prod = prod;
        this.cantidad = cantidad;
        this.tabla = tabla;
        //    tab=new DefaultTableModel(null,getColumnas()); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jColorChooser1 = new javax.swing.JColorChooser();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        Ingredientes = new javax.swing.JComboBox<>();
        aceptar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        cantidad = new javax.swing.JTextField();
        canti = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        total = new javax.swing.JLabel();
        eliminar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        Calorias = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cantidadPorcion = new javax.swing.JTextField();
        cantidadPorciones = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        calxP = new javax.swing.JLabel();
        categoria = new javax.swing.JTextField();
        alerta = new javax.swing.JLabel();
        tipoPac = new javax.swing.JTextField();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 204, 0));

        jLabel1.setText("Ingredientes");

        Ingredientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IngredientesActionPerformed(evt);
            }
        });

        aceptar.setText("Agregar Ingrediente");
        aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptarActionPerformed(evt);
            }
        });

        tabla.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 255)));
        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ingredientes", "Cantidad", "Calorias"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tablaAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(tabla);

        canti.setText("Cantidad");

        jLabel3.setFont(new java.awt.Font("Vivaldi", 2, 24)); // NOI18N
        jLabel3.setText("Cantidad de calorias por porcion: ");

        total.setForeground(new java.awt.Color(0, 102, 51));
        total.setText("00");

        eliminar.setText("Eliminar Ingrediente");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        jLabel5.setText("Calorias");

        Calorias.setEditable(false);

        jLabel4.setFont(new java.awt.Font("Tempus Sans ITC", 2, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 153, 153));
        jLabel4.setText("Contador de Calorias");

        jLabel6.setText("Cantidad de Porciones");

        jLabel7.setFont(new java.awt.Font("Vivaldi", 2, 24)); // NOI18N
        jLabel7.setText("Total de calorias que aporta la receta: ");

        calxP.setText("00");

        categoria.setEditable(false);
        categoria.setForeground(new java.awt.Color(204, 204, 204));
        categoria.setEnabled(false);

        alerta.setFont(new java.awt.Font("Tangerine", 2, 36)); // NOI18N
        alerta.setForeground(new java.awt.Color(255, 51, 51));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(aceptar)
                                .addGap(42, 42, 42)
                                .addComponent(eliminar))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel3))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(calxP, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(153, 153, 153)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Calorias, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(categoria, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(canti)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel5))
                                .addGap(94, 94, 94)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cantidadPorciones, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Ingredientes, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(29, 29, 29)
                                        .addComponent(tipoPac, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(alerta, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(235, 235, 235)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(356, Short.MAX_VALUE)
                    .addComponent(cantidadPorcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(356, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(cantidadPorciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(alerta, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Ingredientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tipoPac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Calorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(categoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(canti))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aceptar)
                    .addComponent(eliminar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(total))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(calxP))
                .addGap(0, 218, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(434, Short.MAX_VALUE)
                    .addComponent(cantidadPorcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(434, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("empty-statement")
    private void aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptarActionPerformed
        float a = 0, to = 0, b = 0, c = 0;
        Double cxc;
        Double cc = null;

        try {
            String nombre = Ingredientes.getSelectedItem().toString();

            Object datos[] = {nombre};
            conexion cn = new conexion();
            ResultSet rs = cn.SelleccionarIngrediente(nombre);
            ResultSetMetaData rsm = rs.getMetaData();
            // DefaultTableModel dfmbuscar =(DefaultTableModel)tabla.getModel();
            tabla.setModel(modelo);
            //int sum = 0;
            modelo.setColumnIdentifiers(new Object[]{"nombre", "cantidad", "calorias"});
            Object[] fila = new Object[3];

            while (rs.next()) {

                for (int i = 0; i < fila.length; i++) {

                    cat = Integer.parseInt((String) categoria.getText());
                  /*  if (cat == 1) {
                        canti.setText("Cantidad en cc.");
                    }
                    if (cat == 2) {
                        canti.setText("Cantidad en gr.");
                    }
                    if (cat == 3) {
                        canti.setText("Cantidad en unidades");
                    }*/
                    fila[0 + i] = Ingredientes.getSelectedItem().toString();//add(Ingredientes);
                    fila[1 + i] = cantidad.getText();// dfmbuscar.addRow(cantidad);
                    if (cat == 1) {//liquido

                        cc = (Double.parseDouble((String) Calorias.getText())) / 100;
                    }
                    if (cat == 2) {
                        cc = (Double.parseDouble((String) Calorias.getText())) / 100;
                    }
                    if (cat == 3) {
                        cc = Double.parseDouble((String) Calorias.getText());
                    }

                    cxc = Double.parseDouble((String) cantidad.getText()) * cc;

                    fila[2 + i] = cxc;//

                    modelo.addRow(fila);
                    CalculoTotal();

                    /*  Double tot=new Double(0.0);
                         for (int h = 0; h<tabla.getRowCount(); h++) {
                          Double t=new Double(tabla.getValueAt(h,2).toString());
                          tot+=t;
                          total.setText(tot.toString(tot));
                       // to=c+Float.parseFloat((String)tabla.getValueAt(h,2));
                       //  cantidad.getText(String.valueOf(c));
                       
                       // total.setText(String.valueOf(to));
                    }
                      //  total.setText(String.valueOf(rs.getInt(to))); 
                        try {
                            String update = "";
                        } catch (Exception e2) {

                        }*/
                }
                // total=new JLabel("0.0");
                // total.setForeground(new Color(60,179,59,38));
                //total.setFont(new Font("Tahoma",Font.BOLD, 24));
            }

        } catch (SQLException ex) {
            Logger.getLogger(ContadorCalorias.class.getName()).log(Level.SEVERE, null, ex);
        }

        /*try {
        String nombre = Ingredientes.getSelectedItem().toString();
        
        Object datos[] = {nombre};
        conexion cn = new conexion();
        ResultSet rs = cn.SelleccionarIngrediente(nombre);
        ResultSetMetaData rsm=rs.getMetaData();
       // DefaultTableModel dfmbuscar =(DefaultTableModel)tabla.getModel();
        this.tabla.setModel(modelo);
        int suma = 0;
        modelo.setColumnIdentifiers(new Object[]{"nombre", "cantidad", "calorias"});
        Object[] fila = new Object[3];
       
            while (rs.next()) {
                for (int i = 0; i < fila.length; i++) {
// fila[0+i] = Ingredientes.getSelectedItem().toString();
                  fila[0+i] = Ingredientes.getSelectedItem().toString();//add(Ingredientes);
                    fila[1+i] = cantidad.getText();// dfmbuscar.addRow(cantidad);
                    fila[2+i] = Calorias.getText();//add(Calorias);
                   this.total.setText(String.valueOf(rs.getInt("calorias")));// total=cantidad.getText()*Calorias.getText();                    // suma=cantidad.getText()* medicion;*/
        //fila[0]=rsm.getColumnLabel(i + 1);//http://www.chuidiang.org/java/mysql/resultset_jtable.php
        /*              modelo.addRow(fila);
                    
                }Ingredientes.setModel((ComboBoxModel<String>) modelo);
               // Ingredientes.addRow(rs.next());
               
    }//GEN-LAST:event_aceptarActionPerformed
        
      
    }   catch (SQLException ex) {
            Logger.getLogger(ContadorCalorias.class.getName()).log(Level.SEVERE, null, ex);
        }
         */
    }

    private void IngredientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IngredientesActionPerformed
        try {

            String nombre = this.Ingredientes.getSelectedItem().toString();
            conexion cn = new conexion();
            ResultSet rs = cn.SelleccionarIngrediente(nombre);

            //  DefaultTableModel dfmbuscar = new DefaultTableModel();
            this.tabla.setModel(modelo);
            rs.next();

            this.Calorias.setText(String.valueOf(rs.getInt("calorias")));
            this.categoria.setText(String.valueOf(rs.getInt("idCategoria")));
            this.tipoPac.setText(String.valueOf(rs.getInt("idPaciente")));
            rs.next();
  cat = Integer.parseInt((String) categoria.getText());
                    if (cat == 1) {
                        canti.setText("Cantidad en cc.");
                    }
                    if (cat == 2) {
                        canti.setText("Cantidad en gr.");
                    }
                    if (cat == 3) {
                        canti.setText("Cantidad en unidades");
                    }
                      c = Integer.parseInt((String) tipoPac.getText());
                    if (c == 1) {
                        alerta.setVisible(true);
                        alerta.setText("Alimento no aconsejado en paciente diabético");
                    }
                    if (c == 2) {
                         alerta.setVisible(true);
                        alerta.setText("Alimento no aconsejado en paciente celíaco");
                    }
                    if (c == 3) {
                         alerta.setVisible(true);
                        alerta.setText("Alimento no aconsejado en paciente hipertenso");
                    }
                     if (c == 4) {
                          alerta.setVisible(false);
                        //alerta.setText("Alimento sin restrincción");
                    }
                     if (c == 5) {
                          alerta.setVisible(true);
                        alerta.setText("Alimento no aconsejado en paciente hepático");
                    }
            modelo.setColumnIdentifiers(new Object[]{"nombre", "calorias", "idCategoria"});
            try {
                while (rs.next()) {
                    
                    modelo.addRow(new Object[]{rs.getString("nombre"), rs.getInt("calorias"), rs.getInt("idCategoria")});

                }
            } catch (SQLException ex) {
                Logger.getLogger(ContadorDeCalorias.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (SQLException ex) {
            Logger.getLogger(ContadorCalorias.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /*private void tablaAncestorAdded(javax.swing.event.AncestorEvent evt) {
        // TODO add your handling code here:
        // dfmbuscar.addRow(fila);
        //      Ingredientes.setModel((ComboBoxModel<String>) modelo);
    }
     */
    private void CalculoTotal() {
        Double tot = new Double(0.0);
        Double totalxporc = new Double(0.0);
        for (int h = 0; h < tabla.getRowCount(); h++) {
            Double t = new Double(tabla.getValueAt(h, 2).toString());
            tot += t;
            total.setText(tot.toString(tot));
            totalxporc = tot / ((Double.parseDouble((String) cantidadPorciones.getText())));
            calxP.setText(tot.toString(totalxporc));
            // to=c+Float.parseFloat((String)tabla.getValueAt(h,2));
            //  cantidad.getText(String.valueOf(c));

            // total.setText(String.valueOf(to));
        }
        //  total.setText(String.valueOf(rs.getInt(to))); 
        try {
            String update = "";
        } catch (Exception e2) {

        }

    }

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        // tabla.getSelectedRow());
        eliminar();
    }

    private void eliminar() {
        int fila, a = 0, to = 0, c = 0, b = 0;
        Double tot = new Double(0.0);
        if (modelo.getRowCount() > 0) {
            if (tabla.getSelectedRow() != -1) {
                for (int h = 0; h < tabla.getRowCount(); h++) {
                    //    Double tot=new Double(0.0);
                    //   for (int h = 0; h<tabla.getRowCount(); h++) {
                    fila = tabla.getSelectedRow();
                    modelo.removeRow(fila);
                    CalculoTotal();
                    //   Double t=new Double(tabla.getValueAt(h,2).toString());
                    ////   tot+=t;
                    //    total.setText(tot.toString(tot));   
                    //fila = tabla.getSelectedRow();

                    //  modelo.removeRow(fila);
                    // for (int h = 0; h<tabla.getRowCount(); h++) {
                    //  a = Integer.parseInt((String)tabla.getValueAt(h, 2));
                    //   b=Integer.parseInt((String)tabla.getValueAt(h, 1));
                    //   c=(a*b)/100;
                    //  to=to+c;
                    //  total.setText(String.valueOf(to));
                    //  total.setText(String.valueOf(rs.getInt(to))); 
                    try {
                        String update = "";
                    } catch (Exception e2) {

                    }
                }

            }

        }
    }

    private void aceptarMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void aceptarMousePressed(java.awt.event.MouseEvent evt) {
// int n1,n2 = 0,n3,n4;//
        try {
            //       n1=Integer.parhttps://youtu.be/zbWEVnzuNisseInt(this.tabla.getValueAt(0,0).toString());
            //       int c1=n1;
            //       int r1=c1;
            //        this.total.getText(String.valueOf(r1));

            //         n2=Integer.parseInt(this.tabla.getValueAt(2,3).toString());
            //       int c2=n2;
            //       int r2=c1*c2;
            //        this.total.getText(String.valueOf(r2));
        } catch (Exception e) {

        }


    }//GEN-LAST:event_IngredientesActionPerformed
    /*
    private void tablaAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tablaAncestorAdded
        // TODO add your handling code here:
        // dfmbuscar.addRow(fila);
        //      Ingredientes.setModel((ComboBoxModel<String>) modelo);
    }//GEN-LAST:event_tablaAncestorAdded

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
        // TODO add your handling code here:
        // tabla.getSelectedRow());
    }//GEN-LAST:event_eliminarActionPerformed

    //  ResultSetMetaData rsm = rs.getMetaData();

    /*  DefaultTableModel modelo = new DefaultTableModel();
       Object datos[]=new Object[2];
       while(rs.next()){
           for(int i=0; i<3;i++){
               datos[i]=rs.getObject(i+1);
           }
           modelo.addRow(datos);
           
       }rs.close();
   }    catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(ContadorCalorias.class.getName()).log(Level.SEVERE, null, ex);
        } 
}/*
    public void cargarTablas(String bd) {
        try {
            Connection con3 = null;
            Class.forName("com.mysql.jdbc.Driver");
            con3 = DriverManager.getConnection("jdbc:mysql://localhost/saludabletentacion", "root", "");
            Statement st = con3.createStatement();
            ResultSet rs = st.executeQuery("Select nombre, calorias from ingredientes");
            ResultSetMetaData rsm = rs.getMetaData();
            int col = rsm.getColumnCount();
            DefaultTableModel modelo = new DefaultTableModel();
            for (int i = 0; i <= col; i++) {
                modelo.addColumn(rsm.getColumnLabel(i));
            }
            Ingredientes.removeAllItems();
            while (rs.next()) {
                //  ComboIngredientes.addItem(rs.getString(1));  
                String fila[] = new String[col];
                for (int j = 0; j < col; j++) {
                    fila[j] = rs.getString(j + 1);
                }
                modelo.addRow(fila);
            }
            tabla.setModel(modelo);
            rs.close();
            con3.close();
        

} catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(ContadorCalorias.class
.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ContadorCalorias.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ContadorCalorias.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ContadorCalorias.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ContadorCalorias.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ContadorCalorias().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Calorias;
    private javax.swing.JComboBox<String> Ingredientes;
    private javax.swing.JButton aceptar;
    private javax.swing.JLabel alerta;
    private javax.swing.JLabel calxP;
    private javax.swing.JLabel canti;
    private javax.swing.JTextField cantidad;
    private javax.swing.JTextField cantidadPorcion;
    private javax.swing.JTextField cantidadPorciones;
    private javax.swing.JTextField categoria;
    private javax.swing.JButton eliminar;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    public javax.swing.JTable tabla;
    private javax.swing.JTextField tipoPac;
    private javax.swing.JLabel total;
    // End of variables declaration//GEN-END:variables
}
